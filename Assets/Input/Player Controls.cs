//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Player Character"",
            ""id"": ""1ee8a293-a1e9-42a1-bf60-11b3c2fc8b96"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bce48258-4e49-4418-ba74-a71ac3c9798e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""9647986a-61b6-4374-9ef2-bf520d8625f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement Keys"",
                    ""type"": ""Value"",
                    ""id"": ""4a43691a-b12f-4626-b99a-61213b58518a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Charge"",
                    ""type"": ""Button"",
                    ""id"": ""6198e6b8-1b8e-42b4-b7cf-feadd48c24f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""bc97cf67-2781-46d6-ba0f-3198cb76672f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release Charge"",
                    ""type"": ""Button"",
                    ""id"": ""78088f7d-0a74-47ce-949e-efc6d6242393"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""385ef0ae-64eb-405c-8333-91213c4e7297"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93b67568-e781-4b31-bd68-7cd8e6ea6c35"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""19111e4d-16ec-4b5c-9a78-a17f4549f835"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Keys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7725e0e9-3726-413e-97b1-8cdcdf01f650"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""99736895-1e0e-4956-b8ae-57543c80196c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2d7c3ed0-7ea8-4679-980a-b51901cd4c0a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8e107b58-a6a5-4de5-b8c2-a85d72f9f5b1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2f23cb25-d11e-4b98-9251-d858cd7fe81b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e9701b1-e18a-434f-8ccb-bde0ae615925"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94b00791-1e10-4de0-b863-aaac97a40b60"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Character
        m_PlayerCharacter = asset.FindActionMap("Player Character", throwIfNotFound: true);
        m_PlayerCharacter_Jump = m_PlayerCharacter.FindAction("Jump", throwIfNotFound: true);
        m_PlayerCharacter_Roll = m_PlayerCharacter.FindAction("Roll", throwIfNotFound: true);
        m_PlayerCharacter_MovementKeys = m_PlayerCharacter.FindAction("Movement Keys", throwIfNotFound: true);
        m_PlayerCharacter_Charge = m_PlayerCharacter.FindAction("Charge", throwIfNotFound: true);
        m_PlayerCharacter_Attack = m_PlayerCharacter.FindAction("Attack", throwIfNotFound: true);
        m_PlayerCharacter_ReleaseCharge = m_PlayerCharacter.FindAction("Release Charge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Character
    private readonly InputActionMap m_PlayerCharacter;
    private IPlayerCharacterActions m_PlayerCharacterActionsCallbackInterface;
    private readonly InputAction m_PlayerCharacter_Jump;
    private readonly InputAction m_PlayerCharacter_Roll;
    private readonly InputAction m_PlayerCharacter_MovementKeys;
    private readonly InputAction m_PlayerCharacter_Charge;
    private readonly InputAction m_PlayerCharacter_Attack;
    private readonly InputAction m_PlayerCharacter_ReleaseCharge;
    public struct PlayerCharacterActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerCharacterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerCharacter_Jump;
        public InputAction @Roll => m_Wrapper.m_PlayerCharacter_Roll;
        public InputAction @MovementKeys => m_Wrapper.m_PlayerCharacter_MovementKeys;
        public InputAction @Charge => m_Wrapper.m_PlayerCharacter_Charge;
        public InputAction @Attack => m_Wrapper.m_PlayerCharacter_Attack;
        public InputAction @ReleaseCharge => m_Wrapper.m_PlayerCharacter_ReleaseCharge;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCharacterActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCharacterActions instance)
        {
            if (m_Wrapper.m_PlayerCharacterActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnJump;
                @Roll.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnRoll;
                @MovementKeys.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnMovementKeys;
                @MovementKeys.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnMovementKeys;
                @MovementKeys.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnMovementKeys;
                @Charge.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnCharge;
                @Charge.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnCharge;
                @Charge.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnCharge;
                @Attack.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnAttack;
                @ReleaseCharge.started -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnReleaseCharge;
                @ReleaseCharge.performed -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnReleaseCharge;
                @ReleaseCharge.canceled -= m_Wrapper.m_PlayerCharacterActionsCallbackInterface.OnReleaseCharge;
            }
            m_Wrapper.m_PlayerCharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @MovementKeys.started += instance.OnMovementKeys;
                @MovementKeys.performed += instance.OnMovementKeys;
                @MovementKeys.canceled += instance.OnMovementKeys;
                @Charge.started += instance.OnCharge;
                @Charge.performed += instance.OnCharge;
                @Charge.canceled += instance.OnCharge;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @ReleaseCharge.started += instance.OnReleaseCharge;
                @ReleaseCharge.performed += instance.OnReleaseCharge;
                @ReleaseCharge.canceled += instance.OnReleaseCharge;
            }
        }
    }
    public PlayerCharacterActions @PlayerCharacter => new PlayerCharacterActions(this);
    public interface IPlayerCharacterActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnMovementKeys(InputAction.CallbackContext context);
        void OnCharge(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnReleaseCharge(InputAction.CallbackContext context);
    }
}
